generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    userName      String    @unique @map("user_name")
    firstName     String    @map("first_name")
    lastName      String    @map("last_name")
    email         String    @unique
    avatarUrl     String    @map("avatar_url")
    mailConfirmed Boolean   @default(false) @map("mail_confirmed")
    password      String
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")
    token         Token[]
    chats         Chat[]    @relation("Participant")
    Message       Message[]

    @@map("users")
}

model Token {
    // todo: maybe create default uuid. now generates in code
    token     String   @unique
    expired   DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @map("user_id")
    userAgent String   @map("user_agent")

    @@map("tokens")
}

model Chat {
    id           String    @id @default(uuid())
    title        String
    type         ChatType
    participants User[]    @relation("Participant")
    messages     Message[] @relation("Messages")
    lastMessage  Message?  @relation("LastMessage")

    @@map("chats")
}

model Message {
    id                  String   @id @default(uuid())
    content             String
    createdAt           DateTime @default(now()) @map("created_at")
    updatedAt           DateTime @updatedAt @map("updated_at")
    sender              User     @relation(fields: [senderId], references: [id])
    senderId            String
    chat                Chat     @relation("Messages", fields: [chatId], references: [id])
    chatId              String
    lastMessageInChat   Chat?    @relation("LastMessage", fields: [lastMessageInChatId], references: [id])
    lastMessageInChatId String?  @unique

    @@map("messages")
}

enum ChatType {
    Direct
    Group
}
